generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())

  email         String    @unique
  password      String
  nickname      String
  profile_url   String

  groups        GroupMember[]
  checkins      Checkin[]
  appointments  Participant[]
  rankigs       Ranking[]
  fcmTokens     FcmToken[]

  is_deleted    Boolean   @default(false)

  created_at    DateTime  @default(now())
  updated_at    DateTime  @default(now())
}

model Group {
  id                  Int       @id @default(autoincrement())

  name                String
  num_participants    Int       @default(1)
  participation_code  String    @unique

  users               GroupMember[]
  appointments        Appointment[]
  rankings            Ranking[]

  is_deleted          Boolean   @default(false)

  created_at          DateTime  @default(now())
  updated_at          DateTime  @default(now())
}

model Appointment {
  id          Int       @id @default(autoincrement())

  gid         Int

  users       Participant[]
  group       Group    @relation(fields: [gid], references: [id])
  checkins    Checkin[]

  title       String
  meet_at     DateTime
  location    String
  penalty     String

  is_deleted  Boolean   @default(false)

  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now())
}

model GroupMember {
  gid         Int
  uid         Int

  user        User     @relation(fields: [uid], references: [id])
  group       Group    @relation(fields: [gid], references: [id])

  is_deleted  Boolean   @default(false)

  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now())

  @@id([gid, uid])
}

model Participant {
  aid         Int
  uid         Int

  user        User         @relation(fields: [uid], references: [id])
  appointment Appointment  @relation(fields: [aid], references: [id])

  is_deleted  Boolean       @default(false)

  created_at  DateTime      @default(now())
  updated_at  DateTime      @default(now())

  @@id([aid, uid])
}

model Checkin {
  aid         Int
  uid         Int

  user        User         @relation(fields: [uid], references: [id])
  appointment Appointment  @relation(fields: [aid], references: [id])

  is_deleted  Boolean       @default(false)

  created_at  DateTime      @default(now())
  updated_at  DateTime      @default(now())

  @@id([aid, uid])
}

model Ranking {
  gid               Int
  uid               Int

  year              Int
  month             Int
  accumulated_time  Int       @default(0)

  user        User     @relation(fields: [uid], references: [id])
  group       Group    @relation(fields: [gid], references: [id])

  is_deleted        Boolean   @default(false)

  created_at        DateTime  @default(now())
  updated_at        DateTime  @default(now())

  @@id([gid, uid, year, month])
}

model FcmToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  uid    Int
  user      User     @relation(fields: [uid], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
